InitLSC:                
;==========================================================
;[AL]:initialize LSC for communication with KISS-host
;==========================================================
;InitLSC() is called at boot-time only. The routine
;initializes the serial port on hardware level as well as
;on software level.
;----------------------------------------------------------

;init KISS (protocol software)
;-----------------------------
        mov     kiss_txdelay,#30        ;default KISS values
        mov     kiss_persist,#64
        mov     kiss_slottime,#10
        mov     kiss_txtail,#2

        clr     KF_WARMREBOOT
        clr     KF_COLDREBOOT

        clr     KF_INFO
        clr     KF_KISSINFO
        clr     KF_SETSFR

;init buffers
;------------
        movwabs tx_writeframe,TXBuf
        mov     tx_framecount,#0
        call    GetLSC_Init

        movwabs rx_readframe,RXBuf
        movw    rx_readdata,rx_readframe


        ret


GetLSC_Init:
;==========================================================
;Standard initialisation of GetLSC while running
;==========================================================
        movw    tx_writedata,tx_writeframe
        addwabs tx_writedata,2
        movwabs tx_framelen,0
        call    OpenKISSFrame
        ret

GetLSC:
;==========================================================
;[S-INT]:read KISS-frames and store in GSC/TX-buffer
;==========================================================
;processes KISS-frames in real-time and stores them as raw
;in a TX-buffer.  GetLSC() is called every time a byte
;drops in on the serial port.
;----------------------------------------------------------
        jnb      RI,GL_exit             ;ONLY process when RI is set
        pushstate
        push    AR0

        call    GetKISSbyte
        jc      GL_done

        mov     R0,A
        pushret GL_done
        mov     A,R0
        jbc     KF_GETTYP,GL_GetFType   ;get frame type
        jb      KF_DFRAME,GL_PutTXBuf   ;put KISS-data into TX-buffer
        jb      KF_CFRAME,GL_HandleCmd  ;handle command frame
        ret

GL_done:
        pop     AR0
        popstate

GL_exit:reti


GL_PutTXBuf:
;==========================================================
;store KISS-dataframes into TX-buffer
;==========================================================
        mov     R0,tx_framelenH
        cjae    R0,#HIGH(MAXFRAMESIZE)+1,GLptx_overflow
        movw    DP,tx_writedata
        movx    @DPTR,A
        inc     DPTR
        movw    tx_writedata,DP
        incw    tx_framelen
GLptx_done:
        ret

GLptx_overflow:
        jmp     GetLSC_Init


GL_GetFType:
;==========================================================
;a frame is opened, determine frame type
;==========================================================
        mov     kiss_command,A          ;save command
        cjne    A,#KC_DATAFRAME,GLft_cmdframe
        clr     KF_SETSFR

GLft_dataframe:
        mov     A,tx_framecount         ;maximum 255 TX-frames
        cje     A,#255,GLft_done

        mov     A,tx_allocatedH         ;check for buffer full
        cjae    A,#HIGH(TXBUFSIZE-MAXFRAMESIZE),GLft_full

        pbset   LED_GETLSC
        setb    KF_DFRAME
        ret

GLft_cmdframe:
        setb    KF_CFRAME

GLft_done:
        ret

GLft_full:
        pbset   LED_TXFULL
        ret

GL_HandleCmd:
;==========================================================
;process KISS Commands
;==========================================================
;following KISS commands are recognised:
;FEND-01-xx-FEND     :xx=TX-DELAY
;FEND-02-xx-FEND     :xx=PERSISTANCE
;FEND-03-xx-FEND     :xx=SLOTTIME
;FEND-04-xx-FEND     :xx=TX-TAIL
;FEND-06-xx-FEND     :xx=SETHARDWARE (SEE BELOW)
;---------------------------------------------------------
        mov     R0,kiss_command
        cje     R0,#KC_HARDWARE,GL_Hardware
        clr     KF_SETSFR

        cje     R0,#KC_TXDELAY ,GL_TXDelay
        cje     R0,#KC_PERSIST ,GL_Persist
        cje     R0,#KC_SLOTTIME,GL_Slottime
        cje     R0,#KC_TXTAIL  ,GL_TXTail
        cje     R0,#KC_RETURN,  GL_ColdReboot
        cje     R0,#KC_RETURN2, GL_WarmReboot
        clr     KF_CFRAME               ;KISS-command not implemented
        ret


GL_TXDelay:
;----------------------------------------------------------
;TXDELAY is the timeunits (of 10ms) to wait to go in TX
;after pushing PTT.
;----------------------------------------------------------
        mov     kiss_txdelay,A          ;set TX-Delay
        clr     KF_CFRAME
        ret

GL_Persist:
;----------------------------------------------------------
;The TNC generates a random number just before it wants
;to push PTT to go in TX. If the generated number is bigger
;than the value defined by PERSISTANCE, it waits SLOTTIME
;timeunits (of 10ms) whereafter the procedure restarts.
;If the generated number was smaller or equal, TNC goes TX.
;----------------------------------------------------------
        mov     kiss_persist,A          ;set Persistance
        clr     KF_CFRAME
        ret

GL_Slottime:
;----------------------------------------------------------
;for info, see the PERSISTANCE specifications above.
;----------------------------------------------------------
        mov     kiss_slottime,A         ;set Slottime
        clr     KF_CFRAME
        ret

GL_TXTail:
;----------------------------------------------------------
;TXTAILS defines the number of timeunits (of 10ms) before
;releasing PTT after sending packets.
;----------------------------------------------------------
        mov     kiss_txtail,A           ;set TXTail
        clr     KF_CFRAME
        ret

GL_WarmReboot:
;----------------------------------------------------------
;after warmreboot the TNC will restart the ON-RAM KISS-TNC
;----------------------------------------------------------
        setb    KF_WARMREBOOT
        clr     KF_CFRAME
        ret

GL_ColdReboot:
;----------------------------------------------------------
;after coldreboot the TNC will return to the ON-ROM
;upload routine.
;----------------------------------------------------------
        setb    KF_COLDREBOOT           ;Reboot
        clr     KF_CFRAME

        ret

GL_Hardware:
;----------------------------------------------------------
;SETHARDWARE is a standard KISS parameter, which can be
;used by each TNC for custom purpose.
;
;FEND-06-01-FEND     :show information on firmware
;FEND-06-02-FEND     :show parameter settings
;FEND-06-xx-FEND     :set SFR register xx with value yy
;----------------------------------------------------------
        clr     KF_CFRAME
        jbc     KF_SETSFR,GLhw_procsfr

        jb      ACC.7,GLhw_setsfrreg
        cje     A,#KCH_INFO,GLhw_info
        cje     A,#KCH_KISSINFO,GLhw_kissinfo
        ret

GLhw_setsfrreg:
        clr     EA
        mov     DPTR,#GLhw_setsfr+1
        call    WriteCRAM
        mov     DPTR,#GLhw_orlsfr+1
        call    WriteCRAM
        mov     DPTR,#GLhw_anlsfr+2
        call    WriteCRAM
        setb    EA
                              
        setb    KF_SETSFR
        ret

GLhw_procsfr:
        jnb     BUTTON1,GLhw_orlsfr
        jnb     BUTTON2,GLhw_anlsfr

GLhw_setsfr:
        db      0f5h,0
        ret

GLhw_orlsfr:
        db      042h,0
        ret

GLhw_anlsfr:
        cpl     A
        db      052h,0          ;boolean AND with value in SFR
        ret


GLhw_info:
;--------------------------------------
;show firmware info
;--------------------------------------
        setb    KF_INFO
        ret

GLhw_kissinfo:
;--------------------------------------
;show kiss-parameters
;--------------------------------------
        setb    KF_KISSINFO
        ret




PutLSC:
;==========================================================
;[AL]:KISS-encapsulate RX-data and write to host
;==========================================================
;PutLSC() writes valid data coming from the GSC to
;the serial port (LSC). They are encapsulated by
;KISS frames of DATAFRAME type.
;----------------------------------------------------------
        mov     A,rx_framecount
        jz      PLSC_godone             ;no frame, exit

PLSC_ring:
        movwcx  rx_framelen,rx_readframe ;read framelength
        cwjnz   rx_framelen,PLSC_putKISS ;on 0, init buffer and reread
        movwabs rx_readframe,RXBuf       ;restore frame and datapointer
        movw    rx_readdata,rx_readframe
        sjmp    PLSC_ring

PLSC_godone:
        jmp     PLSC_done

PLSC_putKISS:
;----------------------------------------------------------
;convert RX-data to KISS and write to host
;----------------------------------------------------------
        addwabs  rx_readdata,2          ;skip framelength definition

        call    PL_OpenKISS


;write data as KISS
;------------------
PLSC_convert:
        incw    rx_framelen             ;write frame to host
        cwjz    rx_framelen,PLSC_close
        call    PLSC_nextbyte
        sjmp    PLSC_convert

;close KISS frame
;----------------
PLSC_close:
        call    PL_CloseKISS

;delete frame 
;------------
        incw    rx_readdata             ;delete frame

        movwcx  WR0,rx_readframe
        clr     EA
        addw    rx_allocated,WR0
        setb    EA

        movw    rx_readframe,rx_readdata
        dec     rx_framecount

PLSC_done:
        pbclr   LED_PUTLSC
        ret


PLSC_nextbyte:
;----------------------------------------------------------
;convert databyte to KISS and send to host
;----------------------------------------------------------
        movw    DP,rx_readdata          ;read next byte
        movx    A,@DPTR
        inc     DPTR
        movw    rx_readdata,DP

;FEND -> FESC TFEND convert
;--------------------------
PLSC_chkFEND:
        cjne    A,#FEND,PLSC_chkFESC
        mov     A,#FESC
        call    PutChar
        mov     A,#TFEND
        sjmp    PLSC_putbyte

;FESC -> FESC TFESC convert
;--------------------------
PLSC_chkFESC:
        cjne    A,#FESC,PLSC_putbyte
        mov     A,#FESC
        call    PutChar
        mov     A,#TFESC

;write KISS to host
;------------------
PLSC_putbyte:
        call    PutChar
        ret

PL_OpenKISS:
        pbset   LED_PUTLSC
        mov     A,#FEND                 ;open new KISS-frame ...
        call    PutChar
        mov     A,#KC_DATAFRAME         ;identify as DATAFRAME
        call    PutChar
        ret

PL_CloseKISS:
        mov     A,#FEND                 ;close KISS-Frame
        call    PutChar
        ret
        
;**********************************************************
;*                                                        *
;*              K I S S   S U B R O U T I N E S           *
;*                                                        *
;**********************************************************


GetKISSbyte:
;==========================================================
;GetKISSbyte() filters KISSframe-escapes from a packet.
;OUTPUT:
;       ACC     = raw and filtered KISS data
;NOTE: if C=TRUE, the result is false
;==========================================================
        mov     A,SBUF                  ;read KISS-byte from host
        clr     RI
        cje     A,#FEND,OpenKISSFrame   ;check for frame ends

;kiss-filter
;-----------
        jbc     KF_FESC,GLK_escape
        cjne    A,#FESC,GLK_valid
        setb    KF_FESC
        setb    C
        ret

GLK_escape:
        cjne    A,#TFEND,GLKesc_tfesc
        mov     A,#FEND
        sjmp    GLK_valid

GLKesc_tfesc:
        cjne    A,#TFESC,GLK_valid
        mov     A,#FESC

GLK_valid:
        clr     C
        ret


OpenKISSFrame:
;----------------------------------------------------------
;open KISS-frame.
;----------------------------------------------------------
        cwjz    tx_framelen,GLof_done

GLof_register:
;------------------
;register frame
;------------------
        movwxc  tx_writeframe,tx_framelen       ;push framelength
        addwabs tx_writeframe,2                 ;skip framelength field
        addw    tx_writeframe,tx_framelen       ;skip frame
        clr     EA                              ;disable interrupts
        addw    tx_allocated,tx_framelen        ;allocate framelength
        setb    EA                              ;enable interrupts

;ring TX framebuffer
;-------------------
        mov     A,tx_writeframeH
        cjb     A,#HIGH(TXBuf+TXBUFSIZE-MAXFRAMESIZE),GLof_initframe
        movwabs tx_framelen,0
        movwxc  tx_writeframe,tx_framelen
        movwabs tx_writeframe,TXBuf

;init for new frame
;------------------
GLof_initframe:
        inc     tx_framecount                   ;register new TX-frame
        jmp     GetLSC_Init

GLof_done:
        setb    KF_GETTYP
        clr     KF_CFRAME
        clr     KF_DFRAME
        clr     KF_FESC

        pbclr   LED_GETLSC
        setb    C
        ret


AutoBaudFEND:
;==========================================================
;automatically detect LSC baudrate
;==========================================================
;OUTPUT:ACC     = baudrate value for TH0
;NOTE:AutoBaud() will only work correctly when within the
;first 3 edges (including startbit) a single bittime occured
;during AutoBaud(), interrupts are disabled
;----------------------------------------------------------
        pushregs

        clr     IT0             ;init timer0
        clr     IE0
        anl     TMOD,#11110000b
        orl     TMOD,#1

ABF_restore:
        clr     TF0
        clr     TR0
        movwabs T0,0

;wait for startbit
;-----------------
        jb      RXD,$           ;Wait for falling edge

;wait for end of 7 zero bits
;---------------------------
        setb    TR0             ;start timer.
        jb      TF0,ABF_restore ;restart on T0 overflow.
        jnb     RXD,$-2         ;wait for rising edge
        clr     TR0

ABF_calcbaud:
        addwabs T0,16

        mov     A,TH0
        swap    A
        anl     A,#0F0h
        mov     R0,A
        mov     A,TL0
        swap    A
        anl     A,#00Fh
        orl     A,R0

        mov     B,#7
        div     AB
        jnz     ABF_foundbaud
        jmp     ABF_restore

ABF_foundbaud:
        mov     R0,A            ;negate for timer value
        clr     A
        clr     C
        subb    A,R0

        clr     TR0             ;sampletime expired, check result.
        clr     TF0             ;stop timer and clear flag.

        popregs
        ret
